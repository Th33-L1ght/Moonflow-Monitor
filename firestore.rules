
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isParent(resource) {
      return request.auth.uid == resource.data.parentUid;
    }

    function isLinkedChild(resource) {
      return request.auth.uid == resource.data.childUid;
    }
    
    match /children/{childId} {
      allow read, write: if request.auth != null && (
        // CREATE: The user creating the profile must be the parentUid in the new document.
        (request.method == 'create' && request.auth.uid == request.resource.data.parentUid) ||

        // READ / UPDATE: The user must be the parent of the profile, or the linked child.
        (request.method in ['get', 'list', 'update'] && (isParent(resource) || isLinkedChild(resource))) ||

        // DELETE: The user must be the parent of the profile.
        (request.method == 'delete' && isParent(resource))
      );
    }

    match /invites/{inviteId} {
      // Only the parent who created the invite can read it.
      allow read: if request.auth != null && request.auth.uid == resource.data.parentUid;
      // Any authenticated user can create an invite (the function checks ownership).
      allow create: if request.auth != null;
      // Any authenticated user can accept an invite (the function checks validity).
      allow update: if request.auth != null;
    }
    
    match /feedback/{feedbackId} {
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
  }
}
